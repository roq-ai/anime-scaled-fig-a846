generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model collector_profile {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id         String?  @db.Uuid
  collection_list String?  @db.VarChar(255)
  wish_list       String?  @db.VarChar(255)
  created_at      DateTime @default(now()) @db.Timestamp(6)
  updated_at      DateTime @default(now()) @db.Timestamp(6)
  user            user?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model discussion_board {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  topic      String   @db.VarChar(255)
  user_id    String?  @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  user       user?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model figure_inventory {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  figure_name      String             @db.VarChar(255)
  store_id         String?            @db.Uuid
  created_at       DateTime           @default(now()) @db.Timestamp(6)
  updated_at       DateTime           @default(now()) @db.Timestamp(6)
  store            store?             @relation(fields: [store_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  purchase_history purchase_history[]
  sales_analytics  sales_analytics[]
}

model purchase_history {
  id               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id          String?           @db.Uuid
  figure_id        String?           @db.Uuid
  purchase_date    DateTime          @db.Date
  created_at       DateTime          @default(now()) @db.Timestamp(6)
  updated_at       DateTime          @default(now()) @db.Timestamp(6)
  figure_inventory figure_inventory? @relation(fields: [figure_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user             user?             @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model sales_analytics {
  id               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  store_id         String?           @db.Uuid
  figure_id        String?           @db.Uuid
  sales_count      Int
  created_at       DateTime          @default(now()) @db.Timestamp(6)
  updated_at       DateTime          @default(now()) @db.Timestamp(6)
  figure_inventory figure_inventory? @relation(fields: [figure_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  store            store?            @relation(fields: [store_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model store {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description      String?            @db.VarChar(255)
  name             String             @db.VarChar(255)
  created_at       DateTime           @default(now()) @db.Timestamp(6)
  updated_at       DateTime           @default(now()) @db.Timestamp(6)
  user_id          String             @db.Uuid
  tenant_id        String             @db.VarChar(255)
  figure_inventory figure_inventory[]
  sales_analytics  sales_analytics[]
  user             user               @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email             String              @unique @db.VarChar(255)
  firstName         String?             @db.VarChar(255)
  lastName          String?             @db.VarChar(255)
  roq_user_id       String              @db.VarChar(255)
  tenant_id         String              @db.VarChar(255)
  created_at        DateTime            @default(now()) @db.Timestamp(6)
  updated_at        DateTime            @default(now()) @db.Timestamp(6)
  collector_profile collector_profile[]
  discussion_board  discussion_board[]
  purchase_history  purchase_history[]
  store             store[]
}
